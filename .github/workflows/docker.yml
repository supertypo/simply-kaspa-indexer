name: Docker Native Image

on:
  push:

env:
  MAIN_REPO: supertypo/simply-kaspa-indexer
  LEGACY_REPO: supertypo/kaspa-db-filler-ng

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            platform: linux/amd64
          - os: ubuntu-22.04-arm
            platform: linux/arm64
    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.MAIN_REPO }}
            ${{ env.LEGACY_REPO }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git describe version
        run: echo "GIT_VERSION=$(git describe --tags --always)" >> $GITHUB_ENV

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ env.GIT_VERSION }}
          outputs: type=image,"name=${{ env.MAIN_REPO }},${{ env.LEGACY_REPO }}",push-by-digest=true,name-canonical=true,push=true

      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        if: github.event_name != 'release' || github.event.release.prerelease == true
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.MAIN_REPO }}
            ${{ env.LEGACY_REPO }}
          flavor: |
            latest=false
          tags: |
            type=sha,prefix=
            type=ref,event=branch
            type=ref,event=tag

      - name: Docker meta
        id: meta_release
        if: github.event_name == 'release' && github.event.release.prerelease == false
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.MAIN_REPO }}
            ${{ env.LEGACY_REPO }}
          flavor: |
            latest=true
          tags: |
            type=sha,prefix=
            type=ref,event=tag

      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.MAIN_REPO }}@sha256:%s ' *)
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.LEGACY_REPO }}@sha256:%s ' *)

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.MAIN_REPO }}:${{ steps.meta.outputs.version }}
          docker buildx imagetools inspect ${{ env.LEGACY_REPO }}:${{ steps.meta.outputs.version }}
